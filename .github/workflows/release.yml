name: Release

on:
  pull_request:
    branches: [ main ]
    types: [ opened, reopened, edited, closed ]

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  id-token: write
  contents: write
  pull-requests: write
  packages: write

jobs:
  release:
    name: Release
    if: github.repository == 'demonicattack/shared-configs'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/ci-setup

      - name: Configure Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Tools with Lerna
        run: yarn run build

      - name: Get Current Versions and Package Names
        id: get-versions-and-names
        run: |
          packages=$(yarn run lerna list --json)
          hashmap=$(echo "$packages" | jq -r '.[] | "\(.name):\(.version)"' | paste -sd "," -)
          echo "HASHMAP=$hashmap" >> $GITHUB_ENV

      - name: Tag Check
        id: tag-check
        run: |
          IFS=',' read -r -a hashmap <<< "${{ env.HASHMAP }}"
          exists_tag=false
          for pair in "${hashmap[@]}"; do
            name=$(echo "$pair" | cut -d':' -f1)
            version=$(echo "$pair" | cut -d':' -f2)
            TAG_EXISTS=$(git ls-remote --tags origin refs/tags/v${version})
            if [ -n "$TAG_EXISTS" ]; then
              exists_tag=true
              break
            fi
          done
          echo "exists_tag=${exists_tag}" >> $GITHUB_ENV
          echo "exists_tag=${exists_tag}" >> $GITHUB_OUTPUT

      - name: Prepare Tags
        id: prepare-tags
        run: |
          IFS=',' read -r -a hashmap <<< "${{ env.HASHMAP }}"
          tag_names=""
          for pair in "${hashmap[@]}"; do
            version=$(echo "$pair" | cut -d':' -f2)
            tag_names+="${tag_names:+,}v${version}"
          done
          echo "TAG_NAMES=$tag_names" >> $GITHUB_ENV
          echo "tag_names=$tag_names" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: comnoco/create-release-action@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare-tags.outputs.tag_names }}
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false

      - name: Wait for OTP Secret
        uses: step-security/wait-for-secrets@v1
        id: wait-for-secrets
        with:
          secrets: |
            OTP:
              name: 'OTP to publish package'
              description: 'OTP from authenticator app'

      - name: Create Release Pull Request or Publish to npm
        uses: changesets/action@v1
        with:
          publish: yarn run ci:release --otp ${{ steps.wait-for-secrets.outputs.OTP }}
          version: yarn run ci:version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PUBLISH_NPM_TOKEN }}

      - name: Add Release Comment
        uses: actions/github-script@v7
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const hashmap = JSON.parse(fs.readFileSync('hashmap.json'));
              const comment = Object.entries(hashmap)
                .map(([name, version]) => `- **${name}**: \`${version}\``)
                .join('\n');
  
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `### Released Packages\n\n${comment}\n\nðŸŽ‰`,
              });
