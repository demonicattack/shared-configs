name: Publish

on:
  pull_request:
    branches: [main]
    types: [closed]
  push: 
    branches: [main]
    tags: [v*]  

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          registry-url: https://registry.npmjs.org/
          node-version: 'latest'

      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Authenticate
        run: |
            echo "@demonicattack:registry=https://registry.npmjs.org/" > .npmrc
            echo "registry=https://registry.npmjs.org/" >> .npmrc
            echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
        env:
            NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Enable Corepack and install Yarn latest
        run: |
          corepack enable
          corepack prepare yarn@latest

      - name: Install dependencies
        run: yarn install

      - name: Lerna build
        run: yarn build

      - name: Get Current Versions
        id: get-versions
        run: |
          versions=$(yarn run lerna list --json | jq -r '.[].version')    
          for version in $versions; do
            echo "VERSION=$version" >> $GITHUB_ENV
          done  
      
      - name: Display Versions
        run: | 
          echo "Versions: ${{ env.VERSION }}"
        
      - name: Tag Check
        id: tag-check
        run: |
          versions=(${{ env.VERSIONS }})
          for version in "${versions[@]}"; do
            TAG_EXISTS=$(git ls-remote --tags origin refs/tags/v${version})
            if [ -n "$TAG_EXISTS" ]; then
              echo "exists_tag=true" >> $GITHUB_ENV
              echo "exists_tag=true" >> $GITHUB_OUTPUT
            else
              echo "exists_tag=false" >> $GITHUB_ENV
              echo "exists_tag=false" >> $GITHUB_OUTPUT
            fi
          done
      - name: Create Release
        if: steps.tag-check.outputs.exists_tag == 'false' && github.event.pull_request.merged == 'true'
        uses: comnoco/create-release-action@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false

      - name: Publish
        if: steps.tag-check.outputs.exists_tag == 'false'
        run: yarn publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Add Release Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'https://github.com/${{ github.repository }}/releases/tag/v${{ env.CURRENT_VERSION }} is released ðŸŽ‰'
            })
